// <auto-generated />
using System;
using GasReact.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GasReact.DAL.Migrations
{
    [DbContext(typeof(GasReactorContext))]
    [Migration("20231229154854_Refactoring_Table_node_To_nodes")]
    partial class Refactoring_Table_node_To_nodes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("GasReact.DAL.Entities.Fermentator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("fermentator_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FermentatorName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fermentator_name");

                    b.HasKey("Id");

                    b.ToTable("fermentators", "public");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Indicator", b =>
                {
                    b.Property<int>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("indicator_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<int>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("IndicatorId");

                    b.HasIndex("RecordId");

                    b.HasIndex("TypeId");

                    b.ToTable("indicators", "public");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Node", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FermentatorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fermentator_id");

                    b.HasKey("RecordId");

                    b.HasIndex("FermentatorId");

                    b.ToTable("nodes", "public");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.TypesIndicators", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("types_indicators", "public");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Indicator", b =>
                {
                    b.HasOne("GasReact.DAL.Entities.Node", "Record")
                        .WithMany("Indicators")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasReact.DAL.Entities.TypesIndicators", "Type")
                        .WithMany("Indicators")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Node", b =>
                {
                    b.HasOne("GasReact.DAL.Entities.Fermentator", "Fermentator")
                        .WithMany("Records")
                        .HasForeignKey("FermentatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fermentator");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Fermentator", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.Node", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("GasReact.DAL.Entities.TypesIndicators", b =>
                {
                    b.Navigation("Indicators");
                });
#pragma warning restore 612, 618
        }
    }
}
